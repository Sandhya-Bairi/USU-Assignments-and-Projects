package com.usu.MissionaryCannibalProblem;

import java.util.ArrayList;
import java.util.List;

enum Position {RIGHT, LEFT}

public class State {

	private int cannibalOnLeftSide;
	private int missionaryOnLeftSide;
	private int cannibalOnRightSide;
	private int missionaryOnRightSide;
	private Position boat;

	private State parentState;

	public State( int missionaryOnLeftSide, int cannibalOnLeftSide, Position boat, int missionaryOnRightSide, int cannibalOnRightSide) {
		this.cannibalOnLeftSide = cannibalOnLeftSide;
		this.missionaryOnLeftSide = missionaryOnLeftSide;
		this.boat = boat;
		this.cannibalOnRightSide = cannibalOnRightSide;
		this.missionaryOnRightSide = missionaryOnRightSide;
	}

	public boolean isGoal() {
		return cannibalOnLeftSide == 0 && missionaryOnLeftSide == 0;
	}

	public boolean isValid() {
		if (missionaryOnLeftSide >= 0 && missionaryOnRightSide >= 0 && cannibalOnLeftSide >= 0 && cannibalOnRightSide >= 0
	               && (missionaryOnLeftSide == 0 || missionaryOnLeftSide >= cannibalOnLeftSide)
	               && (missionaryOnRightSide == 0 || missionaryOnRightSide >= cannibalOnRightSide)) {
			return true;
		}
		return false;
	}

	public List<State> generateSuccessors() {
		List<State> successors = new ArrayList<State>();
		if (boat == Position.LEFT) {
			testAndAdd(successors, new State(cannibalOnLeftSide, missionaryOnLeftSide - 2, Position.RIGHT, cannibalOnRightSide, missionaryOnRightSide + 2)); // Two missionaries cross left to right.
			testAndAdd(successors, new State(cannibalOnLeftSide - 2, missionaryOnLeftSide, Position.RIGHT, cannibalOnRightSide + 2, missionaryOnRightSide)); // Two cannibals cross left to right.
			testAndAdd(successors, new State(cannibalOnLeftSide - 1, missionaryOnLeftSide - 1, Position.RIGHT, cannibalOnRightSide + 1, missionaryOnRightSide + 1)); // One missionary and one cannibal cross left to right.
			testAndAdd(successors, new State(cannibalOnLeftSide, missionaryOnLeftSide - 1, Position.RIGHT, cannibalOnRightSide, missionaryOnRightSide + 1)); // One missionary crosses left to right.
			testAndAdd(successors, new State(cannibalOnLeftSide - 1, missionaryOnLeftSide, Position.RIGHT, cannibalOnRightSide + 1, missionaryOnRightSide)); // One cannibal crosses left to right.
		} else {
			testAndAdd(successors, new State(cannibalOnLeftSide, missionaryOnLeftSide + 2, Position.LEFT, cannibalOnRightSide, missionaryOnRightSide - 2)); // Two missionaries cross right to left.
			testAndAdd(successors, new State(cannibalOnLeftSide + 2, missionaryOnLeftSide, Position.LEFT, cannibalOnRightSide - 2, missionaryOnRightSide)); // Two cannibals cross right to left.
			testAndAdd(successors, new State(cannibalOnLeftSide + 1, missionaryOnLeftSide + 1, Position.LEFT, cannibalOnRightSide - 1, missionaryOnRightSide - 1)); // One missionary and one cannibal cross right to left.
			testAndAdd(successors, new State(cannibalOnLeftSide, missionaryOnLeftSide + 1, Position.LEFT, cannibalOnRightSide, missionaryOnRightSide - 1)); // One missionary crosses right to left.
			testAndAdd(successors, new State(cannibalOnLeftSide + 1, missionaryOnLeftSide, Position.LEFT, cannibalOnRightSide - 1, missionaryOnRightSide)); // One cannibal crosses right to left.
		}
		return successors;
	}

	private void testAndAdd(List<State> successors, State newState) {
		if (newState.isValid()) {
			newState.setParentState(this);
			successors.add(newState);
		}
	}

	public int getcannibalOnLeftSide() {
		return cannibalOnLeftSide;
	}

	public void setcannibalOnLeftSide(int cannibalOnLeftSide) {
		this.cannibalOnLeftSide = cannibalOnLeftSide;
	}

	public int getmissionaryOnLeftSide() {
		return missionaryOnLeftSide;
	}

	public void setmissionaryOnLeftSide(int missionaryOnLeftSide) {
		this.missionaryOnLeftSide = missionaryOnLeftSide;
	}

	public int getcannibalOnRightSide() {
		return cannibalOnRightSide;
	}

	public void setcannibalOnRightSide(int cannibalOnRightSide) {
		this.cannibalOnRightSide = cannibalOnRightSide;
	}

	public int getmissionaryOnRightSide() {
		return missionaryOnRightSide;
	}

	public void setmissionaryOnRightSide(int missionaryOnRightSide) {
		this.missionaryOnRightSide = missionaryOnRightSide;
	}

	public void goToLeft() {
		boat = Position.LEFT;
	}

	public void goToRight() {
		boat = Position.RIGHT;
	}

	public boolean isOnLeft() {
		return boat == Position.LEFT;
	}

	public boolean isOnRigth() {
		return boat == Position.RIGHT;
	}

	public State getParentState() {
		return parentState;
	}

	public void setParentState(State parentState) {
		this.parentState = parentState;
	}

	@Override
	public String toString() {
		if (boat == Position.LEFT) {
			return "(" + cannibalOnLeftSide + "," + missionaryOnLeftSide + ",L," + cannibalOnRightSide + "," + missionaryOnRightSide + ")";
		} else {
			return "(" + cannibalOnLeftSide + "," + missionaryOnLeftSide + ",R," + cannibalOnRightSide + "," + missionaryOnRightSide + ")";
		}
     }

	@Override
	public boolean equals(Object obj) {
		if (!(obj instanceof State)) {
			return false;
		}
		State s = (State) obj;
        return (s.cannibalOnLeftSide == cannibalOnLeftSide && s.missionaryOnLeftSide == missionaryOnLeftSide && s.boat == boat && s.cannibalOnRightSide == cannibalOnRightSide && s.missionaryOnRightSide == missionaryOnRightSide);
	}
}