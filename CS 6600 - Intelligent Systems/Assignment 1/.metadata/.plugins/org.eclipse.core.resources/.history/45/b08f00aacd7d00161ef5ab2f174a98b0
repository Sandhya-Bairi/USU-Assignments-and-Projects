package com.usu.MissionaryCannibalProblem;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class MissionaryAndCannibals {

	@SuppressWarnings("resource")
	public static void main(String[] args) {
		
		//Taking user input for missionaries
		System.out.println("Please enter # of Missionaries:");
		int missionaryCount = new Scanner(System.in).nextInt();

		//Taking user input for cannibals
		System.out.println("Please enter # of Missionaries:");
		int CannibalsCount = new Scanner(System.in).nextInt();
		
		System.out.println("==== Missionaries and Cannibals Problem ====");
		System.out.println("Please choose the search method:");
		System.out.println("\t 1. Breadth-first search");
		System.out.print("\nPlease enter your choice: ");
		int optionSelected = new Scanner(System.in).nextInt();

			//System.out.println("[ERROR] Fail to read the typed option.");
			
		StatesInSolution initialState = new StatesInSolution (missionaryCount, CannibalsCount, Position.LEFT, 0, 0);
		switch(optionSelected) {
		case 1:
			executeBFS(initialState);
			break;
		default:
			System.out.println("[ERROR] Invalid search option.");
		}
	}

	private static void executeBFS(StatesInSolution initialState) {
		BreadthFirstSearch search = new BreadthFirstSearch();
		StatesInSolution solution = search.exec(initialState);
		printSolution(solution);
	}

	private static void printSolution(StatesInSolution solution) {
		if (null == solution) {
			System.out.print("\nNo solution found.");
		} else {
			System.out.println("\nSolution (cannibalLeft, missionaryLeft, boat, cannibalRight, missionaryRight): ");
			List<StatesInSolution> path = new ArrayList<StatesInSolution>();
			StatesInSolution state = solution;
			while(null!=state) {
				path.add(state);
				state = state.getParentState();
			}

			int depth = path.size() - 1;
			for (int i = depth; i >= 0; i--) {
				state = path.get(i);
				if (state.isGoal()) {
					System.out.print(state.toString());
				} else {
					System.out.print(state.toString() + " -> ");
				}
			}
			System.out.println("\nDepth: " + depth);
		}
	}
}