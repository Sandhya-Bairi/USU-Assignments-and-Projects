package com.usu.sudokuSolver.template;

import java.util.HashSet;
import java.util.Set;

/**
 * @author Anuj Khasgiwala
 *
 */
public abstract class SudokuSolver {

	public static String outputFileName = null;

	public static String[] symbols = null;

	protected abstract boolean solve(int row, int column);

	public static boolean isSudokuBoardValid(String board[][]) {
		if (board == null || (Math.sqrt(board.length) != 2 || Math.sqrt(board.length) != 3 || Math.sqrt(board.length) != 4 || Math.sqrt(board.length) != 5))
			return false;
		
		for(int i = 0; i < board.length; i++) {
			Set<String> row = new HashSet<String>(); 
			for(int j = 0; j < board.length; j++) {
				if(!board[i][j].equals("-")) {
					//check duplicates in row
					for(int k = 0; k < board.length; k++) {
						if(row.contains(board[i][k]))
								return false;
						else
							row.add(board[i][k]);
					}
				}
			}
		}
		
		for(int i = 0; i < board.length; i++) {
			Set<String> column = new HashSet<String>(); 
			for(int j = 0; j < board.length; j++) {
				if(!board[i][j].equals("-")) {
					//check duplicates in row
					for(int k = 0; k < board.length; k++) {
						if(column.contains(board[k][j]))
								return false;
						else
							column.add(board[i][k]);
					}
				}
			}
		}
		
		return true;
	}
}