package com.usu.sudokuSolver.template;

/**
 * @author Anuj Khasgiwala
 *
 */
public abstract class SudokuSolver {

	public static String outputFileName = null;

	public static String[] symbols = null;

	protected abstract boolean solve(int row, int column);

	protected boolean isSudokuBoardValid(String board[][]) {
		if (board == null || board.length != 9 || board[0].length != 9)
			return false;
		
		// check each column
		for (int i = 0; i < 9; i++) {
			boolean[] m = new boolean[9];
			for (int j = 0; j < 9; j++) {
				if (!board[i][j].equals('-')) {
					//Need to understand the logic
					/*if (m[(int) (board[i][j] - '1')]) {
						return false;
					}
					m[(int) (board[i][j] - '1')] = true;*/
				}
			}
		}

		//check each row
		for (int j = 0; j < 9; j++) {
			boolean[] m = new boolean[9];
			for (int i = 0; i < 9; i++) {
				if (!board[i][j].equals('-')) {
					//Need to understand the logic
					/*if (m[(int) (board[i][j] - '1')]) {
						return false;
					}
					m[(int) (board[i][j] - '1')] = true;*/
				}
			}
		}

		//check each square matrix
		for (int block = 0; block < 9; block++) {
			boolean[] m = new boolean[9];
			for (int i = block / 3 * 3; i < block / 3 * 3 + 3; i++) {
				for (int j = block % 3 * 3; j < block % 3 * 3 + 3; j++) {
					if (!board[i][j].equals('-')) {
						//Need to understand the logic
						/*if (m[(int) (board[i][j] - '1')]) {
							return false;
						}
						m[(int) (board[i][j] - '1')] = true;*/
					}
				}
			}
		}

		return true;
	}
}