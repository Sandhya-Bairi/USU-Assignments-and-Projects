package Problem1;

public class CDF24 {

	public static void ordDWTForNumIters(double[] signal, int num_iters) {
		final int N = signal.length;
		if ( N < 4 || !Utils.isPowerOf2(N) ) {
			System.out.println("No DWT will be done: signal's length is < 4 or not a power of 2");
			return;
		}
		int i, j, mid;
		double[] D4 = null;

		if ( dbg_flag ) { 
			System.out.print("=>INPUT: "); Utils.displaySample(signal);
		}

		int numScalesToDo = Utils.wholeLog2(N)-1; 
		int currScale  = 0;
		int signal_length = N;
		while ( signal_length >= 4 )  {

			mid = signal_length >> 1; // n / 2;
			if ( dbg_flag ) System.out.println("MID           = " + mid);
			if ( dbg_flag ) System.out.println("signal_length = " + signal_length);
			D4 = new double[signal_length]; // temporary array that saves the scalers and wavelets
			for(i = 0, j = 0; j < signal_length-3; i += 1, j += 2) {
				if ( dbg_flag ) {
					final String cursig = "s^{" + (currScale+1) + "}_{" + (numScalesToDo-1) + "}";
					final String prvsig = "s^{" + currScale + "}_{" + numScalesToDo + "}";
					System.out.println("FWD SCL:  " + cursig + "[" + i + "]=" + "H0*" + prvsig + "[" + j + "]+H1*" + prvsig + "[" + (j+1) + "]+" +
							"H2*" + prvsig + "[" + (j+2) + "]+" + "H3*" + prvsig + "[" + (j+3) + "]; " );
					System.out.println("FWD WVL:  " + cursig + "[" + (mid+i) + "]=" + "G0*" + prvsig + "[" + j + "]+" + "G1*" + prvsig + "[" + (j+1) + "]+" +
							"G2*" + prvsig + "[" + (j+2) + "]+" + "G3*" + prvsig + "[" + (j+3) + "]" );
				}
				// cdf44[i] is a scaled sample
				D4[i]     = H0*signal[j] + H1*signal[j+1] + H2*signal[j+2] + H3*signal[j+3];
				// cdf44[mid+i] is the corresponding wavelet for d4[i]
				D4[mid+i] = G0*signal[j] + G1*signal[j+1] + G2*signal[j+2] + G3*signal[j+3];
			}

			// cdf44[i] is a scaled sample with a mirror wrap-up
			D4[i]     = H0*signal[signal_length-2] + H1*signal[signal_length-1] + H2*signal[0] + H3*signal[1];
			// cdf44[mid+i] is the corresponding wavelet for d4[i]
			D4[mid+i] = G0*signal[signal_length-2] + G1*signal[signal_length-1] + G2*signal[0] + G3*signal[1];

			if ( dbg_flag ) {
				final String cursig = "s^{" + currScale + "}_{" + numScalesToDo + "}";
				final String prvsig = "s^{" + (currScale-1) + "}_{" + (numScalesToDo+1) + "}";
				System.out.println("FWD SCL:  " + cursig + "[" + i + "]=" + "H0*" + prvsig + "[" + (signal_length-2) + "]+H1*" + prvsig + "[" + (signal_length-1) + "]+" +
						"H2*" + prvsig + "[" + 0 + "]+" + "H3*" + prvsig + "[" + 1 + "]; " );
				System.out.println("FWD WVL:  " + cursig + "[" + (mid+i) + "]=" + "G0*" + prvsig + "[" + (signal_length-2) + "]+" + "G1*" + prvsig + "[" + (signal_length-1) + "]+" +
						"G2*" + prvsig + "[" + 0 + "]+" + "G3*" + prvsig + "[" + 1 + "]" );
			}

			System.arraycopy(D4, 0, signal, 0, D4.length);
			D4 = null;
			signal_length >>= 1; // signal_length gets halved at each iteration/scale

			currScale     += 1;
			numScalesToDo -= 1;
			if ( currScale >= num_iters ) return;
		}
	}
	public static void ordInvDWTForNumIters(double[] signal, int num_iters) {

	}
}