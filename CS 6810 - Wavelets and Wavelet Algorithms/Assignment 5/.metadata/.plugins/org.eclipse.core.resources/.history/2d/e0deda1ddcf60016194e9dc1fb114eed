package Problem1;

public class CDF24 {
	static final double SQRT_OF_3 = Math.sqrt(3);
	protected final double denom = 4 * Math.sqrt(2);

	// forward transform smoothing coefficients
	protected final double h0 = (1 + SQRT_OF_3)/denom;
	protected final double h1 = (3 + SQRT_OF_3)/denom; 
	protected final double h2 = (3 - SQRT_OF_3)/denom; 
	protected final double h3 = (1 - SQRT_OF_3)/denom;

	// forward transform wavelet coefficients
	protected final double g0 =  h3;
	protected final double g1 = -h2;
	protected final double g2 =  h1;
	protected final double g3 = -h0;

	// Inverse transform coefficients for smoothed values
	protected final double Ih0 = h2;
	protected final double Ih1 = g2;
	protected final double Ih2 = h0;
	protected final double Ih3 = g0;

	// Inverse transform for wavelet values
	protected final double Ig0 = h3;
	protected final double Ig1 = g3;
	protected final double Ig2 = h1;
	protected final double Ig3 = g1;


	public static void ordDWTForNumIters(double[] signal, int num_iters) {
		final int N = signal.length;
		if ( N < 4 || !Utils.isPowerOf2(N) ) {
			System.out.println("CDF can't be done: Signal length is either less than 4 or not power of 2");
			return;
		}
		int i, j, mid;
		double[] D4 = null;

		if (dbg_flag) { 
			System.out.print("=>INPUT: ");
			Utils.displaySample(signal);
		}

		int numScalesToDo = Utils.wholeLog2(N)-1; 
		int currScale  = 0;
		int signal_length = N;
		while ( signal_length >= 4 )  {

			if (currScale >= 4) {
		         int i, j;
		         int half = currScale >> 1;
		         
			 double tmp[] = new double[currScale];

			 i = 0;
		         for (j = 0; j < currScale-3; j = j + 2) {
		            tmp[i]      = a[j]*h0 + a[j+1]*h1 + a[j+2]*h2 + a[j+3]*h3;
		            tmp[i+half] = a[j]*g0 + a[j+1]*g1 + a[j+2]*g2 + a[j+3]*g3;
			    i++;
		         }

		         tmp[i]      = a[currScale-2]*h0 + a[currScale-1]*h1 + a[0]*h2 + a[1]*h3;
		         tmp[i+half] = a[currScale-2]*g0 + a[currScale-1]*g1 + a[0]*g2 + a[1]*g3;

		         for (i = 0; i < currScale; i++) {
		            a[i] = tmp[i];
		         }
		      }
		}
	}
	public static void ordInvDWTForNumIters(double[] signal, int num_iters) {

	}
}