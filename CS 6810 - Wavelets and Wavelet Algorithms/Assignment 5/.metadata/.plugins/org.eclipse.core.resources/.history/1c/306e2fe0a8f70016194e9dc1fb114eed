package Problem2;

import Problem1.CDF24;

public class Ripples_F_ex_4_4_p34 extends Function {
	public static enum DWT {CDF44, HWT};
	public static enum COEFF {S, D};

	static final int D10_START_1024 = 512;
	static final int D10_END_1024 = 1023;

	static final int D9_START_1024 = 256;
	static final int D9_END_1024 = 511;

	static final int D8_START_1024 = 128;
	static final int D8_END_1024 = 255;

	static final int D7_START_1024 = 64;
	static final int D7_END_1024 = 127;

	static final int D6_START_1024 = 32;
	static final int D6_END_1024 = 63;

	static final int S6_START_1024 = 0;
	static final int S6_END_1024 = 31;
	
	static double[] sRangeFig_4_12_p33 = new double[1024];
	static double[] sDomainFig_4_12_p33 = partition(0.0, 1.0, 1.0/1024.0);
	static Ripples_F_p33 sRipples_F_p33 = new Ripples_F_p33();

	public Ripples_F_ex_4_4_p34() {}

	@Override
	public double v(double t) {
		if (0 <= t && t < 0.25) {
			return Math.sin(4*Math.PI*t);
		} else if (0.25 <= t && t < 0.75) {
			return 1 + Math.sin(4*Math.PI*t);
		} else if (0.75 <= t && t <= 1) {
			return Math.sin(4*Math.PI*t);
		} else {
			throw new IllegalArgumentException("t == " + t);
		}
	}

	static void multires_fig_4_13_cdf_p34(String message, int range_start, int range_end) {
		multires_fig_4_13_p34_aux(message, DWT.CDF44, 6, range_start, range_end);
	}

	static void multires_fig_4_13_hwt_p34(String message, int range_start, int range_end) {
		multires_fig_4_13_p34_aux(message, DWT.HWT, 6, range_start, range_end);
	}

	/*static void fig_4_12_p33() {

		for(int i = 0; i < 1024; i++)  {
			sRangeFig_4_12_p33[i] = sRipples_F_p33.v(sDomainFig_4_12_p33[i]);
		}

		for(int i = 1; i < 1024; i += 32) {
			sRangeFig_4_12_p33[i] += 2;
		}

		//display_signal(sRangeFig_4_12_p33);
	}*/

	static void multires_fig_4_13_p34_aux(String message, DWT dwt, int num_iters, int range_start, int range_end) {
		for(int i = 0; i < 1024; i++)  {
			sRangeFig_4_12_p33[i] = sRipples_F_p33.v(sDomainFig_4_12_p33[i]);
		}

		for(int i = 1; i < 1024; i += 32) {
			sRangeFig_4_12_p33[i] += 2;
		}

		//final int NUM_ITERS = 6;
		forwardDWTForNumIters(sRangeFig_4_12_p33, dwt, num_iters, range_start, range_end);

		//CDF44.orderedDWTForNumIters(sRangeFig_4_12_p33, 6, false);

		double[] signal = new double[sRangeFig_4_12_p33.length];
		for(int i = 0; i < 1024; i++) {
			if ( i >= range_start && i <= range_end ) {
				signal[i] = sRangeFig_4_12_p33[i];
			}
			else {
				signal[i] = 0;
			}
		}

		System.out.println("=========================");
		System.out.println(message);
		//display_signal(signal);
		System.out.println("Inversed Signal");
		System.out.println("=========================");

		inverseDWTForNumIters(signal, dwt, num_iters);
		//CDF44.orderedInverseDWTForNumIters(signal, 6, false);

		//display_signal(signal);
		System.out.println("=========================");
	}

	static void fig_4_13_D10_CDF44_p34() {
		multires_fig_4_13_cdf_p34("Fig. 4.13, 06-06-07-08-09-D10, CDF(4,4) p. 33", D10_START_1024, D10_END_1024);
	}

	static void fig_4_13_D10_HWT_p34() {
		multires_fig_4_13_hwt_p34("Fig. 4.13, 06-06-07-08-09-D10, HWT, p. 33", D10_START_1024, D10_END_1024);
	}

	static void fig_4_13_D9_CDF44_p34() {
		multires_fig_4_13_cdf_p34("Fig. 4.13, 06-06-07-08-D9-010, CDF(4,4), p. 33", D9_START_1024, D9_END_1024);
	}

	static void fig_4_13_D9_HWT_p34() {
		multires_fig_4_13_hwt_p34("Fig. 4.13, 06-06-07-08-D9-010, HWT, p. 33", D9_START_1024, D9_END_1024);
	}

	static void fig_4_13_D8_CDF44_p34() {
		multires_fig_4_13_cdf_p34("Fig. 4.13, 06-06-07-D8-09-010, CDF(4,4), p. 33", D8_START_1024, D8_END_1024);
	}

	static void fig_4_13_D8_HWT_p34() {
		multires_fig_4_13_hwt_p34("Fig. 4.13, 06-06-07-D8-09-010, HWT, p. 33", D8_START_1024, D8_END_1024);
	}

	static void fig_4_13_D7_CDF44_p34() {
		multires_fig_4_13_cdf_p34("Fig. 4.13, 06-06-D7-08-09-010, CDF(4,4), p. 33", D7_START_1024, D7_END_1024);
	}

	static void fig_4_13_D7_HWT_p34() {
		multires_fig_4_13_hwt_p34("Fig. 4.13, 06-06-D7-08-09-010, HWT, p. 33", D7_START_1024, D7_END_1024);
	}

	static void fig_4_13_D6_CDF44_p34() {
		multires_fig_4_13_cdf_p34("Fig. 4.13, 06-D6-07-08-09-010, CDF(4,4), p. 33", D6_START_1024, D6_END_1024);
	}

	static void fig_4_13_D6_HWT_p34() {
		multires_fig_4_13_hwt_p34("Fig. 4.13, 06-D6-07-08-09-010, HWT, p. 33", D6_START_1024, D6_END_1024);
	}

	static void fig_4_13_S6_CDF44_p34() {
		multires_fig_4_13_cdf_p34("Fig. 4.13, S6-06-07-08-09-010, CDF(4,4), p. 33", S6_START_1024, S6_END_1024);
	}

	static void fig_4_13_S6_HWT_p34() {
		multires_fig_4_13_hwt_p34("Fig. 4.13, S6-06-07-08-09-010, HWT, p. 33", S6_START_1024, S6_END_1024);
	}
	
	public static double[] partition(double from, double upto, double step) {
        if ( upto <= from ) return null;
        int n = (int)((upto - from)/step) + 1;
        double[] interval = new double[n];
       
        int i;
        double curr;
        for(i = 0, curr = from; i < n; i++, curr += step) {
            interval[i] = curr;
        }
        return interval;
    }
	
	public static void forwardDWTForNumIters(double[] signal, ApplyDWT.DWT dwt, int num_iters, int range_start, int range_end) {
        if ( dwt == DWT.CDF44 ) {
            CDF24.ordDWTForNumIters(signal, num_iters, false);
        }
        else if ( dwt == DWT.HWT ) {
            OneDHaar.orderedNormalizedFastHaarWaveletTransformForNumIters(signal, num_iters);
        }
        else {
            throw new IllegalArgumentException("Illegal dwt value: " + dwt);
        }
    }
	
	public static void orderedDWTForNumIters(double[] signal, int num_iters, boolean dbg_flag) {
        final int N = signal.length;
        if ( N < 4 || !Utils.isPowerOf2(N) ) {
            System.out.println("No DWT will be done: signal's length is < 4 or not a power of 2");
            return;
        }
        int i, j, mid;
        double[] D4 = null;

        if ( dbg_flag ) { 
            System.out.print("=>INPUT: "); Utils.displaySample(signal);
        }
        
        int numScalesToDo = Utils.powVal(N)-1; 
        int currScale  = 0;
        int signal_length = N;
        while ( signal_length >= 4 )  {
            
            mid = signal_length >> 1; // n / 2;
            if ( dbg_flag ) System.out.println("MID           = " + mid);
            if ( dbg_flag ) System.out.println("signal_length = " + signal_length);
            D4 = new double[signal_length]; // temporary array that saves the scalers and wavelets
            for(i = 0, j = 0; j < signal_length-3; i += 1, j += 2) {
                if ( dbg_flag ) {
                    final String cursig = "s^{" + (currScale+1) + "}_{" + (numScalesToDo-1) + "}";
                    final String prvsig = "s^{" + currScale + "}_{" + numScalesToDo + "}";
                    System.out.println("FWD SCL:  " + cursig + "[" + i + "]=" + "H0*" + prvsig + "[" + j + "]+H1*" + prvsig + "[" + (j+1) + "]+" +
                        "H2*" + prvsig + "[" + (j+2) + "]+" + "H3*" + prvsig + "[" + (j+3) + "]; " );
                    System.out.println("FWD WVL:  " + cursig + "[" + (mid+i) + "]=" + "G0*" + prvsig + "[" + j + "]+" + "G1*" + prvsig + "[" + (j+1) + "]+" +
                        "G2*" + prvsig + "[" + (j+2) + "]+" + "G3*" + prvsig + "[" + (j+3) + "]" );
                }
                // cdf44[i] is a scaled sample
                D4[i]     = H0*signal[j] + H1*signal[j+1] + H2*signal[j+2] + H3*signal[j+3];
                // cdf44[mid+i] is the corresponding wavelet for d4[i]
                D4[mid+i] = G0*signal[j] + G1*signal[j+1] + G2*signal[j+2] + G3*signal[j+3];
            }

            // cdf44[i] is a scaled sample with a mirror wrap-up
            D4[i]     = H0*signal[signal_length-2] + H1*signal[signal_length-1] + H2*signal[0] + H3*signal[1];
            // cdf44[mid+i] is the corresponding wavelet for d4[i]
            D4[mid+i] = G0*signal[signal_length-2] + G1*signal[signal_length-1] + G2*signal[0] + G3*signal[1];
            
            if ( dbg_flag ) {
                final String cursig = "s^{" + currScale + "}_{" + numScalesToDo + "}";
                final String prvsig = "s^{" + (currScale-1) + "}_{" + (numScalesToDo+1) + "}";
                System.out.println("FWD SCL:  " + cursig + "[" + i + "]=" + "H0*" + prvsig + "[" + (signal_length-2) + "]+H1*" + prvsig + "[" + (signal_length-1) + "]+" +
                       "H2*" + prvsig + "[" + 0 + "]+" + "H3*" + prvsig + "[" + 1 + "]; " );
                System.out.println("FWD WVL:  " + cursig + "[" + (mid+i) + "]=" + "G0*" + prvsig + "[" + (signal_length-2) + "]+" + "G1*" + prvsig + "[" + (signal_length-1) + "]+" +
                       "G2*" + prvsig + "[" + 0 + "]+" + "G3*" + prvsig + "[" + 1 + "]" );
            }
            
            System.arraycopy(D4, 0, signal, 0, D4.length);
            D4 = null;
            signal_length >>= 1; // signal_length gets halved at each iteration/scale
            
            currScale     += 1;
            numScalesToDo -= 1;
            if ( currScale >= num_iters ) return;
        }
    }
	
	static public class Ripples_F_p33 extends Function {
	    
	    public Ripples_F_p33() {}
	    @Override
	    public double v(double t) { return Math.log(2.0 + Math.sin(3 * Math.PI * Math.sqrt(t))); } 
	    
	}
}