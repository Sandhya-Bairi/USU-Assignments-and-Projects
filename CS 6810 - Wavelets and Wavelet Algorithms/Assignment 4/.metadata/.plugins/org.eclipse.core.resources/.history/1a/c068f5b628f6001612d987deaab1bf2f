package Problem;

import java.awt.Color;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.opencv.core.*;
import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class PadLocalizer {
	public static int numOfCols = 0;
	public static int numOfRows = 0;
	
	public static void main(String[] args) {
		localizePad("2015-07-27_17-42-44.png", "2015-07-27_17-42-44b.png", "2015-07-27_17-42-44.png");
	}
	
	public static void localizePad(String originalImageFile, String grassImageFile, String outputImageFile) {
		EdgeDetection.markFHWTEdgeHillTopsInRowsandCols(grassImageFile, outputImageFile);
		Mat hwtImg = Highgui.imread("out\\"+outputImageFile);
		Imgproc.threshold(hwtImg,hwtImg, 200,255, Imgproc.THRESH_BINARY);
		Mat grayscale = new Mat(PadLocalizer.numOfRows, PadLocalizer.numOfCols, CvType.CV_8UC1);
		Imgproc.cvtColor(hwtImg, grayscale, Imgproc.COLOR_RGB2GRAY);
		Map<Integer, Integer> colCount = new HashMap<Integer, Integer>();
		int count=0;
		for (int col = 0; col < PadLocalizer.numOfCols; col++) {
            for (int row = 0; row < PadLocalizer.numOfRows; row++) {
                if(grayscale.get(row, col)[0]>=200.0)
                	count++;
            }
            colCount.put(col, count);
		}
		
		int sum = 0;
		Mat histImg = new Mat(numOfRows, numOfCols, CvType.CV_8UC1);
		Imgproc.cvtColor(hwtImg, histImg, Imgproc.COLOR_RGB2GRAY);
		
		for(int i=0;i<colCount.size()-5;i+=5) {
			sum+=colCount.get(i)+colCount.get(i+1)+colCount.get(i+2)+colCount.get(i+3)+colCount.get(i+4);
		/*	Imgproc.calcHist(Arrays.asList(hwtImg), new MatOfInt(0), new Mat(), new Mat(), new MatOfInt(256), new MatOfFloat(0f, 256f), false);
			Point p1 = new Point(Math.round((double) numOfCols / 256) * (i - 1), numOfRows - Math.round(colCount.get(i)));
			Point p2 = new Point(Math.round((double) numOfCols / 256) * (i), numOfRows - Math.round(colCount.get(i+1)));
			Core.line(histImg, p1, p2, new Scalar(255,   0,   0), 2, 8, 0);*/
		}
//		Highgui.imwrite("out\\histogram3.jpg", histImg);
		
		//Core.extractChannel(hwtImg, hwtImg, 0);
	}
	public static void localizePadInDir(String originalDir, String grassDir, String outputDir) {
		File originalFolder = new File(originalDir);
		File bwFolder = new File(grassDir);

		File[] originalFiles = originalFolder.listFiles();
		File[] bwFiles = bwFolder.listFiles();

		if(originalFiles.length != bwFiles.length) return;

		Arrays.sort(originalFiles);
		Arrays.sort(bwFiles);

		for(int i = 0; i < originalFiles.length; i++) {
			PadLocalizer2.localizePad(originalFiles[i].getPath(), bwFiles[i].getPath(), outputDir+originalFiles[i].getName());
		}
	}
}
