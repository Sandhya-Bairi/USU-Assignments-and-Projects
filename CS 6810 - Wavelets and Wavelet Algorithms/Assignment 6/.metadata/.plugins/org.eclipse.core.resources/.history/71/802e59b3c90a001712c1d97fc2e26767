package Problem1;

public class TwoDHWT {
	public static void ordFwdDWTForNumIters(double[][] signal, int num_iters) {
		if (signal.length != signal[0].length) {
			throw new IllegalArgumentException("Signal is not a square matrix of n x n");
		}

		if (!Utils.isPowerOf2(signal.length)) {
			throw new IllegalArgumentException("signal's dimension is not a power of 2");
		}

		int n = signal[0].length;

		for(int i=num_iters;i>0;i--) {
			if (n > 1) {
				//Row based HWT
				applyDWTToRowsOnce(signal, n);
				//System.out.println("Row-Based HWT");
				//Utils.display2DArray(signal, n, n);

				//Column based HWT
				applyDWTToColsOnce(signal, n);
				/*System.out.println();
				System.out.println("Col-Based HWT");
				Utils.display2DArray(signal, n, n);*/

				//
				/*System.out.println("Pre-rearranged Matrix");
				Utils.display2DArray(signal, n, n);
				System.out.println();*/

				//
				fwdRearrangeAHVD(signal, n);				
				/*System.out.println("Rearranged Matrix");
				Utils.display2DArray(signal, n, n);
				System.out.println();*/			
			}
			n/=2;
		}
	}

	public static void applyDWTToRowsOnce(double[][] signal, int n) {
		for(int r = 0; r < n; r++) {
			for(int c = 0; c < n; c += 2) {
				double plus  =  (signal[r][c]+signal[r][c+1])/2.0;
				double minus = (signal[r][c]-signal[r][c+1])/2.0;
				signal[r][c] = plus; signal[r][c+1] = minus;
			}
		}
	}

	public static void applyDWTToColsOnce(double[][] signal, int n) {
		for(int c = 0; c < n; c++) {
			for(int r = 0; r < n; r += 2) {
				double plus  = (signal[r][c] + signal[r+1][c])/2.0;
				double minus = (signal[r][c] - signal[r+1][c])/2.0;
				signal[r][c] = plus; signal[r+1][c] = minus;
			}
		}
	}
	
	public static void fwdRearrangeAHVD(double[][] sig, int ttn) {
        double[][] M = new double[ttn][ttn];
        final int ttn_1 = ttn >> 1;
        int ar = 0, ac = 0;
        int hr = 0, hc = ttn_1;
        int vr = ttn_1, vc = 0;
        int dr = ttn_1, dc = ttn_1;
        
        //System.out.println("hr = " + hr + " hc = " + hc);
        for(int sig_ah_r = 0, sig_vd_r = 1; sig_ah_r < ttn; sig_ah_r += 2, sig_vd_r += 2) {
            //System.out.println("hr = " + hr + " hc = " + hc);
            ac = 0; hc = ttn_1; vc = 0; dc = ttn_1;
            for(int c = 0; c < ttn; c += 2) {
                M[ar][ac] = sig[sig_ah_r][c];
                M[hr][hc] = sig[sig_ah_r][c+1];
                M[vr][vc] = sig[sig_vd_r][c];
                M[dr][dc] = sig[sig_vd_r][c+1];
                ac++; hc++; vc++; dc++;
            }
            ar++; hr++; vr++; dr++;
        }
        for(int r = 0; r < ttn; r++) {
            System.arraycopy(M[r], 0, sig[r], 0, ttn);
        }
        M = null;
    }
}