package Problem;

import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class WaveletAlgos_S17_HW06 {

    // Change this variable accordingly
	static final String OPENCV_DLL_PATH= "D:\\workspace\\USU-Assignments\\CS 6810 - Wavelets and Wavelet Algorithms\\Assignment 6\\Assignment 6\\src\\Problem\\opencv_java2413.dll";

    // Use a static code block to load the dll/so;
    static {
        System.load(OPENCV_DLL_PATH);
    }
   
     static double[][] signal_2x2_1 = {
        {9, 7},
        {5, 3}
     };
     
     static double[][] signal_2x2_2 = {
         {1, 0},
         {0, 1}
     };
     
     
    static double[][] signal_2x2_3 = {
         {255, 100},
         {50, 250}
    };
     
    static double[][] signal_2x2_4 = {
        {7, 5},
        {3, 1}
    };
    
    static double[][] signal_4x4_1 = {
        {9,	7,	6,	2},
        {5,	3,	4,	4},
        {8,	2,	4,	0},
        {6,	0,	2,	2}
    };
    
    static double[][] signal_4x4_2 = {
        {6.0,	8.0,	10.0,	8.0},
        {10.0,	4.0,	8.0,	2.0},
        {2.0,	6.0,	0.0,	6.0},
        {10.0,	6.0,	6.0,	10.0}
    };
   
    static double[][] signal_8x8_1 = {
        {255, 0, 0, 0, 0, 0, 0, 100},
        {0, 255, 0, 0, 0, 0, 100, 0},
        {0, 0, 255, 0, 0, 100, 0, 0},
        {0, 0, 0, 250, 100, 0, 0, 0},
        {0, 0, 0, 120, 150, 0, 0, 0},
        {0, 0, 120, 0, 0, 150, 0, 0},
        {0, 120, 0, 0, 0, 0, 150, 0},
        {120, 0, 0, 0, 0, 0, 0, 150}
    };
    
    static double[][] signal_8x8_2 = {
        {8,  5,  4,  8,  6, 8, 10,  8},
        {8, 10, 10,  4, 10, 4,  8,  2},
        {6, 10,  2,  4,  2, 6,  1,  6},
        {0,  8,  0, 10, 10, 6,  6, 10},
        {8,  8,  8,  0,  4, 8,  6,  2},
        {10, 6,  2,  2,  6, 6,  6,  8},
        {2,  4, 10, 10, 10, 4,  6, 10},
        {10, 6, 10,  6,  6, 4,  4,  4}
    };
    
    static double[][] signal_8x8_3 = {
        {255, 0, 0, 0, 0, 0, 0, 0},
        {0, 255, 0, 0, 0, 0, 0, 0},
        {0, 0, 255, 0, 0, 0, 0, 0},
        {0, 0, 0, 255, 0, 0, 0, 0},
        {0, 0, 0, 0, 255, 0, 0, 0},
        {0, 0, 0, 0, 0, 255, 0, 0},
        {0, 0, 0, 0, 0, 0, 255, 0},
        {0, 0, 0, 0, 0, 0, 0, 255}
    };
    
    public static double[][] img_sample_32x32_01 = {
        {255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255},
        {0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0},
        {0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0},
        {0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0},
        {0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0},
        {0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0},
        {0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0},
        {0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0},
        {255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255},
    };
    
    
    public static void createScaledImageOf2DHWT(String infile, String outfile, int num_iters) {
    	double[][] mat = getGrayscalePixMat(infile);
        int n = (int)(Math.log(mat.length)/Math.log(2));
        System.out.println("n == " + n);
        
        ArrayList<double[][]> transform = TwoDHWT.ordFwdDWTForNumIters(mat, n, num_iters);
        
        double[][] lastAvrgMat = transform.remove(transform.size()-1);
        Mat grayscale = new Mat(mat.length, mat[0].length, CvType.CV_8UC1);

        int avrg_size = mat.length;
        for(int i = 0, mat_size = mat.length; i < transform.size(); i += 3, mat_size /= 2) {
            scaleSetHorMatValsInImage(grayscale, mat_size, transform.get(i));
            scaleVerMatValsInImage(grayscale, mat_size, transform.get(i+1));
            scaleDigMatValsInImage(grayscale, mat_size, transform.get(i+2));
            avrg_size /= 2;
        }
        
        setAvrgMatValsInImage(grayscale, 2*avrg_size, lastAvrgMat);
        
        Highgui.imwrite(IMAGE_SOURCE_DIR + outfile, grayscale);
        grayscale.release();
    }    
    
    public static void testOrd2DHWT(double[][] data, int num_iters) {
        final int dim = data.length;
        TwoDHWT.ordFwdDWTForNumIters(data, num_iters);
        System.out.println("Result Matrix");
        Utils.display2DArray(data, dim, dim);
        System.out.println();
    }
    
    public static void main(String[] args) {
        //For 2D HWT
    	//testOrd2DHWT(signal_8x8_2, 1);
    	
    	//For Image
    	createScaledImageOf2DHWT("input\\ornament_01.jpg", "output\\ornament_01_1_scale.jpg", 1);
    	createScaledImageOf2DHWT("input\\ornament_01.jpg", "output\\ornament_01_1_scale.jpg", 2);
    	createScaledImageOf2DHWT("input\\ornament_01.jpg", "output\\ornament_01_1_scale.jpg", 3);
    	createScaledImageOf2DHWT("input\\ornament_01.jpg", "output\\ornament_01_1_scale.jpg", 4);
    }
    
    public static double[][] getGrayscalePixMat(String infile) {
        Mat orig = Highgui.imread(infile);
        if (orig.rows() == 0 || orig.cols() == 0) {
            throw new IllegalArgumentException("Failed to read " + infile);
        }
        
        Mat grayscale = new Mat(orig.rows(), orig.cols(), CvType.CV_8UC1);
        Imgproc.cvtColor(orig, grayscale, Imgproc.COLOR_RGB2GRAY);
        
        double[][] pix_mat = get1CPixMat(grayscale);
        orig.release();
        grayscale.release();
        return pix_mat;
    }
    
    public static double[][] get1CPixMat(Mat orig) {
        if (orig.rows() == 0 || orig.cols() == 0) {
            throw new IllegalArgumentException("empty image");
        }
        
        double[][] pix_mat = new double[orig.rows()][orig.cols()];
        for (int row = 0; row < orig.rows(); row++) {
            for (int col = 0; col < orig.cols(); col++) {
                pix_mat[row][col] = orig.get(row, col)[0];
            }
        }
        return pix_mat;
    }
}