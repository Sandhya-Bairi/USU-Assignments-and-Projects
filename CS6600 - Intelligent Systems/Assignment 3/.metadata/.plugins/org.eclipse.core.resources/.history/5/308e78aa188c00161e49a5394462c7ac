package com.usu.perceptron;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.text.html.parser.ParserDelegator;

import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.core.Debug.Random;
import weka.core.Instances;
import weka.core.Utils;

public class InputParser {
	
	static Map<Integer, Integer> actualOutput = new HashMap<Integer, Integer>();
	static double learningRate = 0.001;
	static List<Double> errors;
	static double deltaWeight = 0;
	
	public static void main(String[] args) throws Exception {
		Map<Integer, Perceptron> perceptronInputs = new HashMap<Integer, Perceptron>();
		readInputs(perceptronInputs);
	}
	
	public static void readInputs(Map<Integer, Perceptron> perceptronInputs) throws Exception{
		BufferedReader in = new BufferedReader(new FileReader("files/Data.arff"));
		
		String[] tmpOptions = new String[2];
		String classname;
		tmpOptions = Utils.splitOptions("weka.classifiers.trees.J48");
		classname      = tmpOptions[0];
		tmpOptions[0]  = "";
		Classifier cls = (Classifier) Utils.forName(Classifier.class, classname, tmpOptions);
		//fold validation
		Instances data = new Instances(in);
		data.setClassIndex(data.numAttributes() - 1);
		Random random = new Random();
		Instances randData = new Instances(data);
	    randData.randomize(random);
	    randData.stratify(10);
	    
	    Evaluation evalAll = new Evaluation(randData);
	    
	    for(int i = 0; i < 10; i++) {
	    	Evaluation eval = new Evaluation(randData);
	        Instances train = randData.trainCV(10, i);
	        Instances test = randData.testCV(10, i);
	        Classifier clsCopy = Classifier.makeCopy(cls);
	        clsCopy.buildClassifier(train);
	        eval.evaluateModel(clsCopy, test);
	        evalAll.evaluateModel(clsCopy, test);
	        //System.out.println(eval.toMatrixString("=== Confusion matrix for fold " + (i+1) + "/" + 10 + " ===\n"));

	    	String line;
			Perceptron iv;
			int key = 0;
			while ((line = in.readLine()) != null) {
				if(!line.contains("X1")) {
					iv = new Perceptron();
					String[] tokens = line.split("\t");
					iv.setX1(Double.parseDouble(tokens[0]));
					iv.setX2(Double.parseDouble(tokens[1]));
					iv.setTargetOutput(Integer.parseInt(tokens[2]));
					
					perceptronInputs.put(key++, iv);
				}
			}
	    }
	    System.out.println(evalAll.toSummaryString("=== " + 10 + "-fold Cross-validation ===", false));
		in.close();
		double error = 0.0;
		for(int i = 0; i < 1000 || error < 0.0001; i++) {
			for (Integer key : perceptronInputs.keySet()) {
				actualOutput.put(key, calculateOutput(perceptronInputs, key));
			}
			
			error = calculateError(perceptronInputs);
			errors.add(error);
			
			calculateDeltaWeight(perceptronInputs, error);
		}
		BufferedWriter writer  = new BufferedWriter(new FileWriter("files/output.csv"));
		for(int e = 0; e < errors.size(); e++) {
			writer.write(e);
			writer.write(",");
			writer.write(errors.get(e));
			writer.endRecord();
		}
	}
	
	public static int calculateOutput(Map<Integer, Perceptron> perceptronInputs, int key) {
		Perceptron perceptron = perceptronInputs.get(key);
		
		double sum = perceptron.getW0() + perceptron.getX1() * perceptron.getW1() + perceptron.getX2() * perceptron.getW2();
		
		return (sum > perceptron.getThreshold()) ? 1 : 0;
	}
	
	public static double calculateError(Map<Integer, Perceptron> perceptronInputs) {
		double error = 0.0;
		for (Integer key : perceptronInputs.keySet()) {
			error += actualOutput.get(key) - perceptronInputs.get(key).getTargetOutput();
		}
		return error;
	}
	
	public static void calculateDeltaWeight(Map<Integer, Perceptron> perceptronInputs, double error) {
		for (Integer key : perceptronInputs.keySet()) {
			deltaWeight = learningRate * perceptronInputs.get(key).getX1() * error;
			perceptronInputs.get(key).setW1(perceptronInputs.get(key).getW1() + deltaWeight);
			deltaWeight = learningRate * perceptronInputs.get(key).getX2() * error;
			perceptronInputs.get(key).setW2(perceptronInputs.get(key).getW2() + deltaWeight);
		}
	}
}
