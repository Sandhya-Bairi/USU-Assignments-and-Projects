package com.usu.draw;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.image.ImageObserver;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

import com.usu.drawingGUI.DrawPanel;

public class ShapeWithAllState extends Shape {

	private ShapeIntrinsicState intrinsicState;
    public ShapeExtrinsicState extrinsicState;
    
	@Override
	public void draw(Graphics2D graphics, JPanel drawPanel) {
		if (graphics == null || intrinsicState == null) return;

        try {
			//graphics.drawImage(ImageIO.read( new File(intrinsicState.shapeName)), 80, 80, null);
        	Image tmpImg=ImageIO.read( new File(intrinsicState.shapeName));
			//graphics.drawImage(tmpImg, 80, 80, drawPannel);
			//graphics.drawImage(tmpImg, 80, 80, drawPanel);
			graphics.setColor(Color.RED);
			//drawPanel.add(createLabel());
					
			//drawPanel.getGraphics().drawOval(12, 12, 40, 60);
			int x = 600;
			int y = 500;
			
			drawPanel.getGraphics().drawImage(tmpImg, x, y, 50, 50, new ImageObserver() {
				
				@Override
				public boolean imageUpdate(Image img, int infoflags, int x, int y, int width, int height) {
					// TODO Auto-generated method stub
					img=tmpImg;
					/*x=10;
					y=10;
					width=100;
					height=100;*/
					return false;
				}
			});
			
			//drawPanel.repaint();
		} catch (IOException e) {
			e.printStackTrace();
		}

        if (extrinsicState.isSelected) {
            graphics.drawRect(extrinsicState.location.x, extrinsicState.location.y, extrinsicState.size.width, extrinsicState.size.height);

            DrawActionHandle(graphics, extrinsicState.location.x, extrinsicState.location.y);
            DrawActionHandle(graphics, extrinsicState.location.x + extrinsicState.size.width, extrinsicState.location.y);
            DrawActionHandle(graphics, extrinsicState.location.x, extrinsicState.location.y + extrinsicState.size.height);
            DrawActionHandle(graphics, extrinsicState.location.x + extrinsicState.size.width, extrinsicState.location.y + extrinsicState.size.height);
        }
	}
	
	ShapeWithAllState(ShapeIntrinsicState sharedPart, ShapeExtrinsicState nonsharedPart) {
        intrinsicState = sharedPart;
        extrinsicState = nonsharedPart;
    }
	
	private void DrawActionHandle(Graphics2D graphics, int x, int y) {
        graphics.fillRect(x/* - HandleHalfSize*/, y - handleHalfSize, handleHalfSize*2, handleHalfSize*2);
    }
	
	@Override
	public boolean isSelected() {
		return extrinsicState.isSelected;
	}
	
	@Override
	public void setSelected(boolean value) {
		extrinsicState.isSelected = value;
    }

	@Override
	public Point getLocation() {
    	return extrinsicState.location;
    }
    
	@Override
    public void setLocation(Point value) {
    	extrinsicState.location = value;
    }

	@Override
    public Dimension getSize() {
    	return extrinsicState.size;
    }
	
	@Override
    public void setSize(Dimension value) {
		extrinsicState.size = value;
    }
	
	public JLabel createLabel() {
		JLabel imgLabel = new JLabel();
		try {
			ImageIcon icon = new ImageIcon(ImageIO.read(new File("img/sun.jpg")));
			imgLabel.setIcon(icon);
			
			imgLabel.setToolTipText("Anuj");
			imgLabel.setText("Hello");
			imgLabel.setBackground(Color.GREEN);
			imgLabel.setVisible(true);
			imgLabel.setBounds(20, 20, 120, 120);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		return imgLabel;
	}
}