package com.usu.drawingGUI;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

import javax.swing.JPanel;

import com.fasterxml.jackson.databind.JsonSerializer;
import com.usu.draw.Shape;
import com.usu.draw.ShapeExtrinsicState;
import com.usu.draw.ShapeFactory;
import com.usu.draw.ShapeWithAllState;

public class DrawingPalette {

	Shape shape;
	
	public ShapeFactory shapeFactory;
	
	private JsonSerializer<ShapeExtrinsicState> jsonSerializer = new JsonSerializer<>();
	
	private List<Shape> shapes = new ArrayList<Shape>();
	
	private Object lock = new Object();
	
	public boolean isDirty;
	
	public int shapeCount = shapes.size();
	
	 public void add(Shape shape) {
         if (shape != null) {
        	 synchronized(lock) {
        		 shapes.add(shape);
                 isDirty = true;
             }
         }
     }
	 
	 public void clear() {
		 synchronized(lock) {
             shapes.clear();
             isDirty = true;
         }
     }
	 
	 public void removeShape(Shape shape) {
         if (shape != null) {
        	 synchronized(lock) {
                 if (this.shape == shape)
                	 this.shape = null;
                 shapes.remove(shape);
                 isDirty = true;
             }
         }
     }
	 
	 public boolean draw(Graphics2D graphics, JPanel mainPanel) {
         boolean didARedraw = false;
         synchronized(lock) {
             if (isDirty) {
                 graphics.setColor(Color.WHITE);
                 for(Shape shape : shapes)
                	 shape.draw(graphics, mainPanel);
                 isDirty = true;
                 didARedraw = true;
             }
         }
         return didARedraw;
     }
	 
	 public Shape findShapeAtPosition(Point location) {
         Shape result;
         synchronized(lock) {
        	 result = shapes.stream().reduce((s) -> location.x >= s.getLocation().x && location.x < s.getLocation().x + s.getSize().width && 
        			 location.y >= s.getLocation().y && location.y < s.getLocation().y + s.getSize().height);
         }
         return result;
     }
	 
	 public void deleteAllSelected() {
		 synchronized(lock) {
             shapes.removeIf(s -> s.isSelected);
         }
     }
	 
	 public void loadFromString(String stream) {
		 ShapeExtrinsicState extrinsicStates = (List<ShapeExtrinsicState>)JsonSerializer.ReadObject(stream);
         if (extrinsicStates == null) return;

         synchronized(lock) {
             shapes.clear();
             for(ShapeExtrinsicState extrinsicState : extrinsicStates) {
                 Shape shape = shapeFactory.getShape(extrinsicState);
                 shapes.add(shape);
             }
             isDirty = true;
         }
     }
	 
	 public void SaveToStream(Stream<String> stream) {
         List<ShapeExtrinsicState> extrinsicStates = new ArrayList<ShapeExtrinsicState>();
         synchronized(lock) {
             for(Shape shape : shapes) {
                 ShapeWithAllState shapewithAllState = (ShapeWithAllState)shape;
                 if(shapewithAllState != null)
                     extrinsicStates.add(shapewithAllState.extrinsicState);                    
             }
         }
         JsonSerializer.WriteObject(stream, extrinsicStates);
     }
}
