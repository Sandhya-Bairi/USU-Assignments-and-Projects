package com.usu.simulatorCommunication.messages;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;

import com.usu.stocks.Portfolio;

public class SimulatorCommunicator {
	
	DatagramSocket clientSocket;
	Portfolio portfolios;
	
	public void receiveUDPPacket() throws Exception {
		clientSocket = new DatagramSocket(12099);
		
		//ThreadPoolExecutor tickerPool = new ThreadPoolExecutor(50, 1000);
	}
	
	public void stopUDPPacket() throws SocketException, Exception {
		if(clientSocket != null) {
			clientSocket.close();
			clientSocket = null;
		}
	}
	
	private void Monitoring(Object state) {
        if (portfolios == null)
        	return;
        
        while (clientSocket.isConnected()) {
            try {
            	//var message = Receive(1000);
            	portfolios.update(Receive(0));
            }
            catch (Exception e) {                    
                // TODO: Handle the error.  For example, you may want to Stop the communicator and log the error
            }
        }
    }
	
    private TickerMessage Receive(int timeout) throws IOException {
        TickerMessage message = null;

        byte[] receivedPacket = ReceivePacket(timeout);
        if (receivedPacket != null && receivedPacket.length > 0)
            message = TickerMessage.Decode(receivedPacket);

        return message;
    }

    /// <summary>
    /// This method receives a byte array from the UpdClient, within some time limit.  Used by
    /// the Receive method
    /// </summary>
    /// <param name="timeout"></param>
    /// <returns></returns>
    private byte[] ReceivePacket(int timeout) throws IOException {
        
    	byte[] receivedPacket = new byte[1024];

        clientSocket.setSoTimeout(timeout);
        try {
        	clientSocket.receive(new DatagramPacket(receivedPacket, receivedPacket.length));
        }
        catch (SocketException err) {

        }
        return receivedPacket;
    }
}