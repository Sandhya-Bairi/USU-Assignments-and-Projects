package com.usu.sudokuSolver.board;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class SudokuBoardParser {

    public static int[][] parse(int option) {

        String[] whichPuzzle = new String[6];
        whichPuzzle[0] = "puzzleTemplate/4x4.txt";
        whichPuzzle[1] = "puzzleTemplate/9x9.txt";
        whichPuzzle[2] = "puzzleTemplate/16x16.txt";
        whichPuzzle[3] = "puzzleTemplate/25x25.txt";
        whichPuzzle[4] = "puzzleTemplate/4x4Unsolvable.txt";
        whichPuzzle[5] = "puzzleTemplate/9x9Unsolvable.txt";

        String selectedPuzzle = null;

        if(option == 0) {
            selectedPuzzle = whichPuzzle[0];
        } else if(option == 1) {
            selectedPuzzle = whichPuzzle[1];
        } else if(option == 2) {
            selectedPuzzle = whichPuzzle[2];
        } else if(option == 3) {
            selectedPuzzle = whichPuzzle[3];
        } else if(option == 4) {
            selectedPuzzle = whichPuzzle[4];
        } else if(option == 5) {
            selectedPuzzle = whichPuzzle[5];
        }


        try {
            assert selectedPuzzle != null;
            BufferedReader fileReader = new BufferedReader(new FileReader(selectedPuzzle));
            List<String> lines = new ArrayList<String>();
            while(fileReader.readLine() != null) {
            	lines.add(fileReader.readLine());
            }
            int size = lines.size() - 1;
            int[][] board = new int[size][size];
            for(int i = 1; i <= size; i++) {
                StringTokenizer st = new StringTokenizer(lines.get(i));
                int numbTokens = st.countTokens();
                for(int j = 0; j < numbTokens; j++) {
                    String currentToken = st.nextToken();
                    board[i - 1][j] = Integer.parseInt(currentToken);
                }
            }

            for(int i = 0; i < board[0].length; i++) {
                for(int j = 0; j < board.length; j++) {
                    System.out.print(board[i][j] + "  ");
                }
                System.out.println();
            }

            return board;

        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }

    }
}